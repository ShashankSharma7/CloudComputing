import java.io.*;
import java.util.*;
import java.util.Map.*;
import java.net.*;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Anagram {
	
	public static class AnagramTestMapper extends
		Mapper<Object, Text, Text, Text> {
			public void map(Object key, Text value, Context context)
					throws IOException, InterruptedException {
				StringTokenizer itr = new StringTokenizer(value.toString());
				while (itr.hasMoreTokens()) 
				{
					String word = itr.nextToken().replaceAll("[^a-zA-Z]", "").toLowerCase();
					char[] arr = word.toCharArray();
					Arrays.sort(arr);
					String wordKey = new String(arr);
					context.write(new Text(wordKey), new Text(word));
				}
			}
		}
		
	public static class AnagramTestReducer
		extends Reducer<Text, Text, Text, Text> {
			
			// private Text testword = new Text();
			private Text treemap = new Text();
			
			public void reduce(Text key, Iterable<Text> values, Context context)
					throws IOException, InterruptedException {						
						
				// HashSet<String> anagram = new HashSet<>();
				HashMap<String, Integer> hashmapAnagram = new HashMap<>();
				
				for (Text val : values) 
				{
					// anagram.add(val.toString());
					if(!(hashmapAnagram.containsKey(val.toString()))) 
					{
						hashmapAnagram.put(val.toString(), 1);
					}
					else
					{
						hashmapAnagram.put(val.toString(), hashmapAnagram.get(val.toString()) + 1);
					}
				}
				
				try 
				{
					URL url = new URL("https://www.textfixer.com/tutorials/common-english-words-with-contractions.txt");
					
					Scanner sc = new Scanner(url.openStream());
					
					while (sc.hasNextLine()) 
					{
						String currentLine = sc.nextLine();
						String [] words = currentLine.split(",");
						for(String a : words) 
						{
							// if(list.contains(a)) {
								// list.remove(a);
							// }
							if(hashmapAnagram.containsKey(a))
							{
								hashmapAnagram.remove(a);
							}
						}
					}
				}
				catch (IOException e) 
				{
					e.printStackTrace();
				}	
				
				TreeMap<String, Integer> sortedMap = new TreeMap<>(hashmapAnagram);
				// sortedMap.putAll(hashmapAnagram);
				
				// ArrayList<String> list = new ArrayList<String>(anagram);			
					
				// Collections.sort(list);
				// testword.set(list.toString());
				
				// if(list.size() > 1)
				
				// Comparator<Entry<String, String>> valueComparator = new Comparator<Entry<String, String>>() 
				// {
					// @Override
					// public int compare(Entry<String, String> e1, Entry<String, String> e2)
					// {
						// String v1 = e1.getValue();
						// String v2 = e2.getValue();
						// return v1.compareTo(v2);
					// }
				// };
				
				// List<Entry<String, String>> listOfEntries = new ArrayList<Entry<String, String>>();
				
				// for(Entry<String, Integer> test : hashmapAnagram)
				// {
					// listOfEntries.put(test.getKey(), test.getValue().toString());
				// }
				
				// Collections.sort(listOfEntries, valueComparator);
				
				// LinkedHashMap<String, String> sortedByValue = new LinkedHashMap<String, String>(listOfEntries.size());
				
				// for(Entry<String, String> entry : listOfEntries)
				// {
					// sortedByValue.put(entry.getKey(), entry.getValue());
				// }
				
				HashMap<String, Integer> newSortedHashmapTest = testySort(hashmapAnagram);
				
				
				if(newSortedHashmapTest.size() > 1)				
				{
					// context.write(key, testword);
					// treemap.set(sortedMap.toString());
					treemap.set(newSortedHashmapTest.toString());
					context.write(key, treemap);
				}
			}
		}
		
	public static HashMap<String, Integer> testySort(HashMap<String, Integer> hm)
	{
		List<Map.Entry<String, Integer>> list = new LinkedList<Map.Entry<String, Integer>>(hm.entrySet());
				
				Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
					public int compare (Map.Entry<String, Integer> e1, Map.Entry<String, Integer> e2)
					{
						return -1*(e1.getValue()).compareTo(e2.getValue());
					}
				});
				
				HashMap<String, Integer> temp = new LinkedHashMap<String, Integer>();
				for (Map.Entry<String, Integer> x : list) 
				{
						temp.put(x.getKey(), x.getValue());
				}
				
		return temp;
	}
	
	public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "anagram");
        job.setJarByClass(Anagram.class);
        job.setMapperClass(AnagramTestMapper.class);
        job.setReducerClass(AnagramTestReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class); 
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
